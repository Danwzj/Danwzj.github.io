<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DanDahl</title>
  
  
  <link href="http://danwzj.github.io/blog/atom.xml" rel="self"/>
  
  <link href="http://danwzj.github.io/blog/"/>
  <updated>2020-11-16T03:38:06.471Z</updated>
  <id>http://danwzj.github.io/blog/</id>
  
  <author>
    <name>DanDahl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 安装和配置</title>
    <link href="http://danwzj.github.io/blog/2020/11/16/hexo/1-start/"/>
    <id>http://danwzj.github.io/blog/2020/11/16/hexo/1-start/</id>
    <published>2020-11-16T02:26:34.000Z</published>
    <updated>2020-11-16T03:38:06.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><p>Hexo 搭建 GitPages 个人博客网站，一键部署</p><h2 id="为什么使用-Hexo"><a href="#为什么使用-Hexo" class="headerlink" title="为什么使用 Hexo"></a>为什么使用 Hexo</h2><ul><li>Git 直接创建 GitPages 后直接提交就可以；下面是优点</li><li><a href="!https://hexo.bootcss.com/">Hexo 官网</a> 的描述<ul><li>快速、简洁且高效的博客框架</li></ul></li><li>特点<ul><li>超快速度：基于 Node.js</li><li>支持 Markdown 语法</li><li>主题有 首页/标签/分类/关于 页面和时间线记录，更利于操作和阅读</li><li>有数据采集的插件，可以记录网站访问人数等</li><li>一键部署：只需【一条指令】即可部署到 GitHub Pages, Heroku 或其他平台</li><li>插件和可扩展性：模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成</li></ul></li><li>Vue2.x 官网文档，就是使用了 Hexo，说明 Hexo 还是被采用度较高</li><li>Vue3.x 官网文档，使用了 VuePress 自己开发的文档管理工具，大概看了下，就是按照 Hexo 的模式改良的</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>当前版本 5.2.0</code></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><a href="!http://nodejs.org/">Node.js</a>（版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本）</li><li><a href="!http://git-scm.com/">Git</a></li></ul><p>这两个都是最基本的，就不详细讲述了</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>全局安装命令行工具 <code>npm install -g hexo-cli</code></li><li>本地安装 <code>npm install hexo</code></li></ul><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><ul><li>hexo init 创建项目文件，会生成一个标准的目录结构，切换到项目文件，安装依赖</li><li><code>hexo init &lt;folder&gt; &amp;&amp; cd folder &amp;&amp; npm install</code></li></ul><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><ul><li>本地运行：<code>npm run server</code> 或 <code>hexo server</code>，详细看 <a href="#%E5%91%BD%E4%BB%A4">命令</a></li><li>到这里，就可以先本地运行，看下效果了，因为都有默认配置</li><li>然后看目录结构，并自定义配置</li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h3><ul><li>node_modules：项目安装的依赖</li><li>.gitignore：git 提交忽略（会自动生成）<ul><li>如果没有 public/ 项，添加上（发布的目录）</li></ul></li><li>package.json：项目管理</li></ul><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul><li>.config.yml：hexo 项目配置文件</li><li>scaffolds：生成文章的一些模板（post/page/draf）</li><li>source：文章的存放位置</li><li>themes：使用的主题本文件</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>官网文档已经有详细说明，这里说几个基本需要修改的，更多内容请看官网文档</p><ul><li>Site：网站（有助于 SEO）<ul><li>title：网站标题，即页签标题</li><li>subtitle：网站副标题</li><li>description：网站描述</li><li>keywords：网站关键词</li><li>author：作者</li><li>language：网站使用的语言，默认 en 英语<ul><li>zh-CN：表示用在中国大陆区域的中文。包括各种大方言、小方言、繁体、简体等等都可以被匹配到</li><li>zh-Hans：表示简体中文。适用区域范围是全宇宙用中文简体的地方，内容包括各种用简体的方言等</li></ul></li></ul></li><li>URL：网址<ul><li>url：必须是 <code>http://</code> 或 <code>https://</code><ul><li>比如：<code>https://&lt;yourGithubName&gt;.github.io</code></li><li>或者：<code>https://&lt;yourGithubName&gt;.github.io/blog</code></li></ul></li><li>root：网站跟目录<ul><li>如果网站存放在子目录，需设置为 <code>/blog/</code>，且 url <code>https://&lt;yourGithubName&gt;.github.io/blog</code></li></ul></li></ul></li><li>Directory：目录配置<ul><li>source_dir：sourece<ul><li>如果你更习惯于 src，这里可以设置 src；编译时，将按照 source_dir 目录来进行编译</li></ul></li><li>public_dir：编译打包后的目录，发布的话就是发布这里的代码</li></ul></li><li>deploy：发布配置<a href="#%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2">一键发布</a><br>type: git // GitPages 发布<br>repo: <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#111;&#x6d;</a>:yourGithubName/yourGithubName.github.io //GitPages 仓库<br>branch: main //GitPages 仓库 settings-GitPagesSource</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><ul><li>本地运行 <code>npm run server</code> 执行 <code>hexo server</code></li><li>清理目录 <code>npm run clean</code> 执行 <code>hexo clean</code></li><li>编译打包 <code>npm run build</code> 执行 <code>hexo build</code></li><li>一键发布 <code>npm run deploy</code> 执行 <code>hexo deploy</code></li></ul><h3 id="稍微改进一下"><a href="#稍微改进一下" class="headerlink" title="稍微改进一下"></a>稍微改进一下</h3><ul><li>package.json 中的 scripts 添加如下命令（熟悉 Node.js 的同学可以自定义更丰富的内容）</li><li>本地运行：start <code>npm run server</code></li><li>发布命令：public <code>npm run clean &amp;&amp; npm run build &amp;&amp; npm run deploy</code></li></ul><p>这里插一句，如果以后文件内容过多，打包速度变慢后，可以使用 <strong>concurrently</strong> 插件，npm scripts 并发队列的插件，或者使用 Webpack + Vue/React 都可以</p><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><h3 id="创建-GitHubPages"><a href="#创建-GitHubPages" class="headerlink" title="创建 GitHubPages"></a>创建 GitHubPages</h3><ul><li>首先，你先要有一个<a href="!https://github.com/">GitHub</a>账户，没有的话去注册一个吧</li><li>注册完登录后，在 GitHub.com 中看到一个 New repository，新建仓库</li><li>Name：创建一个和你用户名相同的仓库，后面加.github.io<ul><li>Name 必须和你的 Github Name 相同</li><li>点击 create repository 新建完成</li></ul></li></ul><h3 id="生成-SSH-添加到-GitHub"><a href="#生成-SSH-添加到-GitHub" class="headerlink" title="生成 SSH 添加到 GitHub"></a>生成 SSH 添加到 GitHub</h3><ul><li>配置 Git 信息<ul><li><code>git config --global user.name &quot;yourname&quot;</code></li><li><code>git config --global user.name &quot;youremail&quot;</code></li></ul></li><li>查看<ul><li><code>git config user.name</code></li><li><code>git config user.email</code></li></ul></li><li>生成 SSH<ul><li><code>ssh -keygen -t rsa -C &quot;youremail&quot;</code></li><li>一般在 <code>C:\Users\用户\.ssh</code> 这个目录中<ul><li>如果报错 Key is invalid. You must supply a key in OpenSSH public key format，直接打开复制的格式会不正确</li><li>GitBase 进入路径 <code>~/.ssh/id_rsa.pub</code></li><li><code>cat ~/.ssh/id_rsa.pub</code> 进行复制</li></ul></li></ul></li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li>需要 <code>npm install --save hexo-deployer-git</code> 下载插件</li><li>一键部署，执行【public】即可<ul><li>上述 <code>npm run clean &amp;&amp; npm run build &amp;&amp; npm run deploy</code></li></ul></li></ul><p>基本的发布部署配置基本就完成了；下面就是使用和其他配置了，如：</p><ul><li>创建 post/page/draf 模板，写博客内容</li><li>使用和更换主题 themes 以及配置</li><li>添加页面访问统计：百度统计/不蒜子</li><li>评论系统</li><li>SEO 优化</li><li>也可以配置自己的<strong>个人域名</strong></li><li>coding page 上部署,实现国内外分流</li></ul><p>等等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;个人博客搭建&quot;&gt;&lt;a href=&quot;#个人博客搭建&quot; class=&quot;headerlink&quot; title=&quot;个人博客搭建&quot;&gt;&lt;/a&gt;个人博客搭建&lt;/h1&gt;&lt;p&gt;Hexo 搭建 GitPages 个人博客网站，一键部署&lt;/p&gt;
&lt;h2 id=&quot;为什么使用-Hexo&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://danwzj.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Web 和 Web 标准</title>
    <link href="http://danwzj.github.io/blog/2020/11/16/web/2-standard/"/>
    <id>http://danwzj.github.io/blog/2020/11/16/web/2-standard/</id>
    <published>2020-11-15T23:00:11.000Z</published>
    <updated>2020-11-16T03:34:38.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-和-Web-标准"><a href="#Web-和-Web-标准" class="headerlink" title="Web 和 Web 标准"></a>Web 和 Web 标准</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web-和-Web-标准&quot;&gt;&lt;a href=&quot;#Web-和-Web-标准&quot; class=&quot;headerlink&quot; title=&quot;Web 和 Web 标准&quot;&gt;&lt;/a&gt;Web 和 Web 标准&lt;/h1&gt;</summary>
      
    
    
    
    
    <category term="Web" scheme="http://danwzj.github.io/blog/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Web 概述</title>
    <link href="http://danwzj.github.io/blog/2020/11/16/web/1-summary/"/>
    <id>http://danwzj.github.io/blog/2020/11/16/web/1-summary/</id>
    <published>2020-11-15T19:05:41.000Z</published>
    <updated>2020-11-16T03:36:41.700Z</updated>
    
    <content type="html"><![CDATA[<hr><p>这里是完全新手的 Web 入门，可能有点太过初级。<br>但下层基础决定上层建筑，大多都是 Web 标准，可以指导我们工作的标准化，从而实现工程化。<br>比如，万维网的运行原理，就是做 SEO 和性能优化最主要和重要的根据。</p><hr><h1 id="建立网站"><a href="#建立网站" class="headerlink" title="建立网站"></a>建立网站</h1><p>开发一个网站需要哪些知识和工具？</p><h2 id="安装基础软件"><a href="#安装基础软件" class="headerlink" title="安装基础软件"></a>安装基础软件</h2><h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><ul><li>纯文本编辑器<ul><li>记事本</li><li>Vim</li><li>Sublime</li></ul></li><li>混合编辑器（集成工具）<ul><li><strong>VS Code</strong></li><li>Webstorm</li><li>Hbuilder</li><li>Dreamweaver</li></ul></li></ul><h3 id="Web-浏览器"><a href="#Web-浏览器" class="headerlink" title="Web 浏览器"></a>Web 浏览器</h3><ul><li>Chrome</li><li>Firefox</li><li>IE（Microsoft Edge）</li><li>Opera</li><li>Safari</li></ul><h3 id="图像编辑器"><a href="#图像编辑器" class="headerlink" title="图像编辑器"></a>图像编辑器</h3><ul><li>PhotoShop</li><li>Sketch</li><li>XD</li><li>GIMP</li><li>Paint.NET</li></ul><h3 id="版本控制系统（管理服务器文件，项目团队写作，共享代码资源，避免编辑冲突）"><a href="#版本控制系统（管理服务器文件，项目团队写作，共享代码资源，避免编辑冲突）" class="headerlink" title="版本控制系统（管理服务器文件，项目团队写作，共享代码资源，避免编辑冲突）"></a>版本控制系统（管理服务器文件，项目团队写作，共享代码资源，避免编辑冲突）</h3><ul><li>Git</li><li>GitHub/GitLab：是基于 Git 的代码托管服务网站</li></ul><h3 id="FTP-工具"><a href="#FTP-工具" class="headerlink" title="FTP 工具"></a>FTP 工具</h3><ul><li>在<a href="#%E7%BD%91%E7%AB%99%E7%9A%84%E5%8F%91%E5%B8%83">网站的发布</a>模块有简单说明</li></ul><h3 id="自动化构建工具"><a href="#自动化构建工具" class="headerlink" title="自动化构建工具"></a>自动化构建工具</h3><ul><li>用来自动完成压缩代码和运行测试等重复性任务的集成，如<ul><li>Grunt</li><li>Gulp</li><li>Rollup</li><li>Webpack</li><li>FIS3（我以前用过的）</li></ul></li></ul><h3 id="模板，库，框架等，提供效率"><a href="#模板，库，框架等，提供效率" class="headerlink" title="模板，库，框架等，提供效率"></a>模板，库，框架等，提供效率</h3><h3 id="还有很多其他的"><a href="#还有很多其他的" class="headerlink" title="还有很多其他的"></a>还有很多其他的</h3><h3 id="本地测试服务器"><a href="#本地测试服务器" class="headerlink" title="本地测试服务器"></a>本地测试服务器</h3><h4 id="本地文件-远程文件"><a href="#本地文件-远程文件" class="headerlink" title="本地文件/远程文件"></a>本地文件/远程文件</h4><ul><li>本地文件：通过浏览器直接打开，URL 以 <code>file://</code> 开头的，读取硬盘里的文件</li><li>远程文件：Web 地址以 <code>http://</code> 或 <code>https://</code> 开头的，是通过 HTTP 传输的</li></ul><h4 id="测试本地文件的问题"><a href="#测试本地文件的问题" class="headerlink" title="测试本地文件的问题"></a>测试本地文件的问题</h4><ul><li>异步请求：本地文件运行，因为是本地硬盘的文件，所以浏览器不会运行异步请求。远程服务器获取数据才可以</li><li>服务端代码：本地服务器也是需要服务器语言</li></ul><h4 id="本地简单的-HTTP-服务器"><a href="#本地简单的-HTTP-服务器" class="headerlink" title="本地简单的 HTTP 服务器"></a>本地简单的 HTTP 服务器</h4><ul><li>Python</li><li>PHP</li><li>Node.js：Node.js 是 JavaScript 语言，学习起来会更会计，而且有 Express 这样的框架</li></ul><h2 id="你的网站看起来是什么样的？"><a href="#你的网站看起来是什么样的？" class="headerlink" title="你的网站看起来是什么样的？"></a>你的网站看起来是什么样的？</h2><ul><li>这里就是网站的设计,不做详细阐述<ul><li>网站结构</li><li>网站内容</li><li>主题色调</li><li>每个模块的设计</li></ul></li><li>主要是用户的观感和体验问题</li></ul><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><ul><li>一个网站包含很多文件：文本内容/代码/样式表/媒体内容等。</li><li>需要设计文件结构，更规范化和合理化</li></ul><h3 id="网站的位置"><a href="#网站的位置" class="headerlink" title="网站的位置"></a>网站的位置</h3><ul><li>本地网站，将所有相关文件，放在一个单独的文件夹中，可以映射出服务器端站点文件结构</li><li>确定网站项目存储位置</li></ul><h3 id="大小写和空格"><a href="#大小写和空格" class="headerlink" title="大小写和空格"></a>大小写和空格</h3><ul><li>文件夹名和文件名都要小写字母，且没有空格，因为：<ul><li>很多计算机，特别是 Web 服务器，对大小写敏感</li><li>浏览器/ Web 服务器，还有编程语言，处理空格的方式不一致</li></ul></li><li>使用连字符 <code>-</code><ul><li>最好使用中划线，不适用下划线分离单词 <code>my-project</code></li><li>谷歌引擎把连字符当作单词的分隔符 <code>-</code>，但不会识别下划线 <code>_</code></li></ul></li></ul><h3 id="网站的结构"><a href="#网站的结构" class="headerlink" title="网站的结构"></a>网站的结构</h3><ul><li>常见结构<ul><li>index.html：主页内容资源</li><li>images 文件夹：图片资源</li><li>styles 文件夹：样式表资源</li><li>scripts 文件夹： JavaScript 代码资源</li></ul></li></ul><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><ul><li>文件资源提供访问路径<ul><li>HTML 文件同级，只需文件名 <code>my-image.jgp</code></li><li>子文件夹的文件，<code>subdirectory/my-image.jgp</code></li><li>HTML 文件上级，<code>../myimage.png</code></li><li>可随意组合，标识一个路径</li></ul></li><li>相对路径或绝对路径</li></ul><h2 id="HTML-知识"><a href="#HTML-知识" class="headerlink" title="HTML 知识"></a>HTML 知识</h2><ul><li>之后会做记录和整理</li></ul><h2 id="CSS-知识"><a href="#CSS-知识" class="headerlink" title="CSS 知识"></a>CSS 知识</h2><ul><li>之后会做记录和整理</li></ul><h2 id="JavaScript-知识"><a href="#JavaScript-知识" class="headerlink" title="JavaScript 知识"></a>JavaScript 知识</h2><ul><li>之后会做记录和整理</li></ul><h2 id="网站的发布"><a href="#网站的发布" class="headerlink" title="网站的发布"></a>网站的发布</h2><h3 id="获取主机服务和域名"><a href="#获取主机服务和域名" class="headerlink" title="获取主机服务和域名"></a>获取主机服务和域名</h3><ul><li>主机服务：在主机服务供应商的 Web 服务器上租用文件空间</li><li>域名：在域名注册上租借域名，做域名解析</li><li>文件传输协议程序：FTP/SFTP 等</li></ul><h3 id="FTP-文件传输协议"><a href="#FTP-文件传输协议" class="headerlink" title="FTP 文件传输协议"></a>FTP 文件传输协议</h3><ul><li>曾经：主机之间传输文件的标准协议</li><li>现在：很多组织和主机账户，不允许使用 FTP；取而代之的时 Git 版本控制系统</li></ul><h3 id="Github-或-Google-App-Engine（在线发布网站）"><a href="#Github-或-Google-App-Engine（在线发布网站）" class="headerlink" title="Github 或 Google App Engine（在线发布网站）"></a>Github 或 Google App Engine（在线发布网站）</h3><ul><li>Git：版本控制系统，主要特点：写作代码项目，系统默认开源，GitFlow 分支模型，GitPages 网页站点</li><li>Google App Engine：在 Google 的基础架构上构建和运行应用的平台<a href="!https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_do_you_host_your_website_on_Google_App_Engine">GoogleAppEgine</a></li></ul><h2 id="万维网的运行原理"><a href="#万维网的运行原理" class="headerlink" title="万维网的运行原理"></a>万维网的运行原理</h2><ul><li>通过浏览器访问网页时的过程</li></ul><h3 id="客户端和服务器"><a href="#客户端和服务器" class="headerlink" title="客户端和服务器"></a>客户端和服务器</h3><ul><li>客户端：请求访问资源</li><li>服务器：响应返回资源</li></ul><h3 id="浏览器输入一个网址后的过程"><a href="#浏览器输入一个网址后的过程" class="headerlink" title="浏览器输入一个网址后的过程"></a>浏览器输入一个网址后的过程</h3><ul><li>浏览器在域名系统（DNS）服务器，找出存放网页的服务器的实际地址</li><li>浏览器发送 HTTP 请求信息到服务器，拷贝一份网页到客户端（使用 TCP/IP 协议传输）</li><li>服务器响应客户端信息后，返回也给 <code>200 OK</code> 信息，然后开始将网页文件，以数据包的形式传输到浏览器</li><li>浏览器将数据包聚集成完整的网页，然后渲染出页面</li></ul><h4 id="DNS-解析查询，获取域名对应的-IP-地址"><a href="#DNS-解析查询，获取域名对应的-IP-地址" class="headerlink" title="DNS 解析查询，获取域名对应的 IP 地址"></a>DNS 解析查询，获取域名对应的 IP 地址</h4><ul><li>查询浏览器 DNS 缓存</li><li>查询操作系统 DNS 缓存</li><li>查询 host 文件</li><li>查询路由器缓存</li><li>查询 ISP(网络运营商) DNS 缓存</li><li>递归查询：从根域名服务器，到顶级域名服务器，再到极限域名服务器，一直搜索到对应目标</li></ul><h4 id="TCP-IP-连接"><a href="#TCP-IP-连接" class="headerlink" title="TCP/IP 连接"></a>TCP/IP 连接</h4><ol><li>本机将标识 SYN=1，seq=x(sequence number)发送给服务端；本机状态为 SYN-SENT</li><li>服务器收到包后，切换状态为 SYN-RECEIVED，并将标识 SYN=1 和 ACK=1，seq=y，ack=x+1，发送给客户端</li><li>客户端收到包后，切换状态为 ESTABLISHED，并将标识 ACK=1，seq=x+1,ack=y+1，发送给服务端。服务端收到包后，切换状态为 ESTABLISHED</li></ol><h4 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h4><ul><li>HTTP 协议</li></ul><h4 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h4><ul><li>浏览器渲染引擎及解析过程</li></ul><h4 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h4><ul><li>现在的页面，为了优化请求的耗时，默认会开启 keep-alive（长连接）</li><li>一个 TCP 连接，确认关闭的时机，是 tab 标签页关闭的时候</li><li>四次挥手<ol><li>客户端发送一个 FIN 置为 1 的包，ack = y， seq = x + 1，此时客户端的状态为 FIN_WAIT_1</li><li>服务端收到包后，状态切换为 CLOSE_WAIT 发送一个 ACK 为 1 的包， ack = x + 2。客户端收到包之后状态切换为 FNI_WAIT_2</li><li>服务端处理完任务后，向客户端发送一个 FIN 包，seq = y; 同时将自己的状态置为 LAST_ACK</li><li>客户端收到包后状态切换为，并向服务端发送 ACK 包，ack = y + 1，等待 2MSL 后关闭连接。</li></ol></li></ul><h2 id="工具集与测试"><a href="#工具集与测试" class="headerlink" title="工具集与测试"></a>工具集与测试</h2><ul><li>之后会做记录和整理</li></ul><h2 id="服务端网站编程"><a href="#服务端网站编程" class="headerlink" title="服务端网站编程"></a>服务端网站编程</h2><ul><li>之后会做记录和整理</li></ul><p>这里只是做一个简单的介绍和记录，每一部分都有很多的内容和深度，所以，希望可以把每一部分都学习并记录下来，早日摆脱菜鸟的身份！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;这里是完全新手的 Web 入门，可能有点太过初级。&lt;br&gt;但下层基础决定上层建筑，大多都是 Web 标准，可以指导我们工作的标准化，从而实现工程化。&lt;br&gt;比如，万维网的运行原理，就是做 SEO 和性能优化最主要和重要的根据。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;建</summary>
      
    
    
    
    
    <category term="Web" scheme="http://danwzj.github.io/blog/tags/Web/"/>
    
  </entry>
  
</feed>
